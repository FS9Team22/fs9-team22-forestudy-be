import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';

const prisma = new PrismaClient();

async function main() {
  console.log('Seeding started...');

  const numberOfStudies = 10; // ÏÉùÏÑ±Ìï† Ïä§ÌÑ∞Îîî Í∑∏Î£π Ïàò
  const habitsPerStudy = 3; // Ïä§ÌÑ∞Îîî Í∑∏Î£π Îãπ ÏäµÍ¥Ä Ïàò
  const logsPerHabit = 15; // ÏäµÍ¥Ä Îãπ Î°úÍ∑∏ Ïàò

  await prisma.$transaction(async (tx) => {
    console.log('Deleting existing data...');
    // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
    await tx.habitLog.deleteMany();
    await tx.reaction.deleteMany();
    await tx.habit.deleteMany();
    await tx.study.deleteMany();
    console.log('Existing data deleted.');
    for (let i = 0; i < numberOfStudies; i++) {
      // Ïä§ÌÑ∞Îîî ÏÉùÏÑ±
      const study = await tx.study.create({
        data: {
          title: faker.lorem.words(3), // 3Í∞úÏùò Îã®Ïñ¥Î°ú Îêú Ïä§ÌÑ∞Îîî Ïù¥Î¶Ñ
          nickname: faker.internet.username(), // ÏÉùÏÑ±Ïûê ÎãâÎÑ§ÏûÑ
          description: faker.lorem.sentence(), // Ïä§ÌÑ∞Îîî ÏÜåÍ∞ú
          point: faker.number.int({ min: 0, max: 1000 }), // 0ÏóêÏÑú 1000 ÏÇ¨Ïù¥Ïùò Ìè¨Ïù∏Ìä∏
          background: faker.number.int({ min: 1, max: 10 }), // 1ÏóêÏÑú 10 ÏÇ¨Ïù¥Ïùò Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Î≤àÌò∏
          password: faker.internet.password(), // ÎπÑÎ∞ÄÎ≤àÌò∏
        },
      });

      console.log(`Created study: ${study.title}`);

      // Î∞òÏùë(Reaction) ÏÉùÏÑ±
      const emojis = ['üëç', '‚ù§Ô∏è', 'üöÄ', 'üéâ', 'üî•'];
      for (const emoji of emojis) {
        // 50% ÌôïÎ•†Î°ú Î∞òÏùë ÏÉùÏÑ±
        if (faker.datatype.boolean()) {
          await tx.reaction.create({
            data: {
              studyId: study.id,
              emoji: emoji,
              count: faker.number.int({ min: 1, max: 50 }),
            },
          });
        }
      }

      // ÏäµÍ¥Ä(Habit) ÏÉùÏÑ±
      for (let j = 0; j < habitsPerStudy; j++) {
        const habit = await tx.habit.create({
          data: {
            studyId: study.id,
            name: faker.lorem.word(), // Ìïú Îã®Ïñ¥Î°ú Îêú ÏäµÍ¥Ä Ïù¥Î¶Ñ
          },
        });

        console.log(`  - Created habit: ${habit.name}`);
        // ÏäµÍ¥Ä Î°úÍ∑∏(HabitLog) ÏÉùÏÑ±
        const uniqueDates = new Set();
        while (uniqueDates.size < logsPerHabit) {
          const logDate = faker.date.recent({ days: 30 }); // ÏµúÍ∑º 30Ïùº ÎÇ¥Ïùò ÎÇ†Ïßú
          const dateOnly = logDate.toISOString().split('T')[0]; // ÎÇ†ÏßúÏùò ÏãúÍ∞Ñ Î∂ÄÎ∂ÑÏùÑ Ï†úÍ±∞
          uniqueDates.add(dateOnly);
        }

        for (const dateStr of uniqueDates) {
          await tx.habitLog.create({
            data: {
              habitId: habit.id,
              loggingDate: new Date(dateStr),
            },
          });
        }
        console.log(`- Created ${uniqueDates.size} habit logs`);
      }
    }
  });

  console.log('Seeding finished.');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
